generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String  @id @default(uuid())
  name              String?
  email             String  @unique
  username          String? @unique
  bio               String?
  password          String
  image             String?
  avatarKey         String?
  isProfileComplete Boolean @default(false)

  chats Chat[] @relation("ChatMembers")

  // Group conversations
  groupsCreated Group[] @relation("GroupCreator")
  adminOfGroups Group[] @relation("GroupAdmin")

  // Friend requests
  requestsSent     FriendRequest[] @relation("FriendRequestSender")
  requestsReceived FriendRequest[] @relation("FriendRequestReceiver")
  friends          User[]          @relation("Friends")
  friendsOf        User[]          @relation("Friends")

  // Blocked users
  blockedUsers User[] @relation("BlockedBy")
  blockedBy    User[] @relation("BlockedBy")

  // Messages
  messagesSent     Message[] @relation("Sender")
  messagesReceived Message[] @relation("Recipient")
  messagesRead     Message[] @relation("ReadBy")

  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
}

// For friend requests
model FriendRequest {
  id String @id @default(uuid())

  senderId   String
  sender     User   @relation("FriendRequestSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("FriendRequestReceiver", fields: [receiverId], references: [id])

  accepted Boolean @default(false)

  createdAt DateTime @default(now())
}

model Chat {
  id      String  @id @default(uuid())
  name    String
  isGroup Boolean @default(false)

  members User[] @relation("ChatMembers")

  groupId String? @unique
  group   Group?  @relation("Chat")

  messages Message[] @relation("ChatMessages")

  createdAt DateTime @default(now())
}

// For group conversations
model Group {
  id String @id @default(uuid())

  creatorId String
  creator   User   @relation("GroupCreator", fields: [creatorId], references: [id])

  admins User[] @relation("GroupAdmin")

  chatId String @unique
  chat   Chat   @relation("Chat", fields: [chatId], references: [id])

  createdAt DateTime @default(now())
}

model Message {
  id      String @id @default(uuid())
  content String

  senderId String
  sender   User   @relation("Sender", fields: [senderId], references: [id])

  recipientId String?
  recipient   User?   @relation("Recipient", fields: [recipientId], references: [id])

  chatId String
  chat   Chat   @relation("ChatMessages", fields: [chatId], references: [id])

  readBy User[] @relation("ReadBy")

  createdAt DateTime @default(now())
}
